Git Bash cmd line instructions for GitLab

############ Load a file for the first time ###################
1 cd                                 # goes to master
2 ls                               # lists files in PC, C:/
dir g*                             # list files from directory that starts with g*
3 cd git/trashdump-software/         # goes to trashdump-software/ folder
ls -la                             # list files in a folder
4 git status                         # shows on red the files with changes that are available to be pushed
5 git add <nameoffile>		       # adds a particular files
git add .                          # adds all files
6 git status						 # shows the file to be commited in green color
7 git commit -m "insert message"     # commit changes and give a message about it
8 git push 

ERROR CASE AFTER git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master

>>>> git push --set-upstream origin master	

ERROR CASE AFTER git push --set-upstream origin master
error: failed to push some refs to 'https://gitlab.lrz.de/...git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

>>>> git branch --set-upstream-to=origin/master

ERROR CASE AFTER git branch --set-upstream-to=origin/master
error: the requested upstream branch 'origin/master' does not exist
hint:
hint: If you are planning on basing your work on an upstream
hint: branch that already exists at the remote, you may need to
hint: run "git fetch" to retrieve it.
hint:
hint: If you are planning to push out a new local branch that
hint: will track its remote counterpart, you may want to use
hint: "git push -u" to set the upstream config as you push.

>>>> git fetch origin
git branch --set-upstream-to=origin/master
9 git pull

ERROR CASE AFTER git pull
fatal: refusing to merge unrelated histories

>>>> git pull --allow-unrelated-histories

############ Load a folder with its content ###################
1 pwd
2 cd git/trashdump-software/       # navigate to this folder
3 git branch -a                    # to know in which branch in the repository I am working
4 git status                       # to see in green all the new files or folders in my local git. These are the possible changes to be commited
                                 # in red I can see the new or untracked files
5 git add nameofthefolder/         # add the folder I want to upload
6 git status                       # to have an idea of the recognized files and the changes to be commited
7 git commit -m "update folders"   # commit the above mentioned changes
8 git push origin main           # "main" is the name of the branch where I am working. I am pushing the changes into that branch

############ Delete a file ####################################
1 navigate to the right folder where the file is located that you want to delete
2 git rm -r name_of_the_file.ipynb
3 git commit -m "moved script to subfolder"
4 git push origin master

############ Pull/clone a repository into my desktop folder from Gitlab ##################
git clone <url> nameoftherepofolder
Example: git clone https://gitlab.lrz.de/name.git nameofthegithub
git pull

ERROR AFTER  git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> master
>>>> git checkout master
git pull

################ Reverse changes from a pushed file ########################
git status
# check the file that was changed
git diff
# check the new changes on the aforementioned files

### If I dont want to accept the changes on the file
git checkout nameoffile.ext
git status
# there should be nothing to commit
git diff
# there shouold not be any output, because the additions were deleted

Watch
https://www.youtube.com/watch?v=zeNLY4t436E

############## Wrong email, username #################
https://gist.github.com/carlosmcevilly/2221249

git config user.name "Your Name"
git config user.email "your@address.com"
git submodule foreach --recursive 'git config user.name "Your Name" && git config user.email "your@address.com"'
git rebase -i HEAD~1
git commit --amend --reset-author
git rebase --continue

############### editor inside of gitBash ###############
:q (quit)




